redux  解决组件state传递和代码维护关系----

---------
store 存放数据（所有state）

UI->Actions->Reducer->store->UI

reducer 是纯函数----》输入相同的参数返回的数据都是相同的

--------------
createStore必须放在根文件中--例：index.js中


方法：
1.  createStore
const store = createStore(reducer)
2.store.dispatch(action)---触发action（自动匹配reducer里面的action） 
3.reducer(state,action)---返回新的state

4.combineReducers 可以合并多个reducer

cosnt rootReducer = combineReducers({
	user,
	count
})
------------------

-------------------
react-redux

1.connect()()方法
2.Provider包裹需要的根类,可以传入store例如：
 <Provider store={store}><App store={store}/></Provider>

然后在使用connect()()方法连接
------------------------------

store.subscribe() 监听---》当state变化时（即调用dispatch时触发）触发

------------
1.store传递给组件数据state
传递state以props传递给子组件
const mapStateToProps = (state)=>{

	return {
		count:state
	}
}
   
这个方法是把state转换成props, state是store.getState（）数据，他是自动调用的

然后通过export default connect(mapStateToProps)(Product);

这样Product就可以通过this.props.count获取到这个数据state了,另外通过connect()方法也把自动把store的dispatch传给Product的this.props了
-----------------------------

2.组件通过action函数把数据交给store中的reducer中，然后加工数据

在Product可以通过dispatch(increment("rails365"))  把这个"rails365"回调给reducer中的action，（需要在action中定义字段）从而对数据进行操作。
------------
connect可以传递(mapStateToProps，mapDispatchToProps 两个参数，

3.怎么在组件中调用dispatch方法触发action
 3.1通过connect()方法也把自动把store的dispatch传给Product的this.props了
然后直接通过this.props.dispatch(action)调用

只要connect传递了第二个参数，dispatch就不能传递给组件了
下面调用都用()=>this.props.increment(name) 调用就可以

 3.2mapDispatchToProps -----是把dispatch做加工返回一个方法 传递action
	const mapDispatchToProps =(dispatch) =>{
   		 return {
        		increment:(name) =>{dispatch(increment(name))}
    		}
	};

	connect((mapStateToProps，mapDispatchToProps)
 3.3 使用从Redux中的 bindActionCreators from "Redux" 连接方法和dispatch
	const mapDispatchToProps =(dispatch) =>{
  	  return {
       	   increment:bindActionCreators(increment,dispatch)
   	  }
	}

   或者写成传对象的方式---不常用
	const mapDispatchToProps =(dispatch) =>{
   		return  bindActionCreators({increment},dispatch);
	}
	connect((mapStateToProps，mapDispatchToProps)
  3.4 直接把值放在connect作为参数传递-----这种用的较多
 	connect((mapStateToProps，{increment,decrement})

  3.5 使用装饰器来写@connect---ES6特性 ----需要加用脚手架create-react-app 不支持@connect，需要卸载react-scripts 重新安装新的
     加载定义类的上面，类似于java上面的注解
	@connect（mapStateToProps,mapDispatchToProps）


注解：	
常用dispatch调用action方法是直接
const {increment,decrement} = this.props;

connect((mapStateToProps，{increment,decrement})

onClick={() => increment()}  

上面就相当于dipatch（increment()）
const {dispatch} =this.props
onClick={() => dispatch(increment())} 

另外的场景：
如果有很多action在调用
return bindActionCreator(types,dispatch) 比connect((mapStateToProps，{increment,decrement})方便一点
------------------------
装饰器：是给类添加新的属性等



----------------------

---------------------
中间件--相当于原理很简单就是将store的dispatch进行替换，换成一个功能增强了但是具有dispach功能的新函数请输入代码，原理和java设计模式中的 装饰者模式很像，旨在增强功能，但不改变接口

1.流程：先dispatch（Action）--> Middleware -->Reducer--->store-->view-->dispatch....

2.语法：使用applyMiddleWare作为参数放在创建store
	const store = createStore(reducer,{},applyMiddleWare(中间件方法)）	

使用applyMiddleWare(...ars)---可以放多个中间件--中间件执行完没有了才执行到Reducer中

3.自定义中间件
const logger =store=>next=>action=>{
	console.log("dispatching",action);
	let result = next(action);//这里表示调用下一个中间件 如果没有的话 就会调用reducer方法了,然后继续执行下面语句
	console.log("next statin",store.getState())
	return result;
}

const store = createStore(rootReducer,{},applyMiddleWare(logger))
中间这个参数是初始的state值
-------------------------------
4.利用别人写的中间件
redux-logger
--------------
npm install redux-logger

import logger from 'redux-logger'
const store = createStore(rootReducer,{},applyMiddleWare(logger))


--------------------

--------------------
redux-thunk中间件用于处理异步数据---action可以是返回一个函数

当action返回一个dispatch方法时，用redux-thunk 添加到中间件中

const store = createStore(rootReducer,{},applyMiddleWare(redux-thunk))

另外actions需要调用时是返回一个函数，而不是对象了
例如：
export const increment= (name) =>{
    return dispatch => {
        setTimeout(()=>{
            dispatch({
                    type:INCREMENT,
                    name
                })
        },3000);

    }
}


--------------------------

中间件redux-promise-middleware

index.js导入:
import promise from "redux-promise-middleware";

const store = createStore(rootReducer,{},applyMiddleware(logger,thunk,promise()));//这里注意：参数是用promise()


actions/index.js中

export const getUser=()=>{
   return {
        type:LOAD_USER,
       // payload:axios.get("https://randomudser.me/api/") 或者
	payload:{
	   promise:axios.get("https://randomudser.me/api/")
	}
    }
}

这里的payload相当于一个new Promise

这个自动会自动在你的type后面添加这几个加载(PENDING)，加载成功(FULFILED)，加载错误(REJECTD)三有LOAD_USER_PENDING,LOAD_USER_FULFILED,LOAD_USER_REJECTD


---------------
action/index.js数字增加可以改写
export const increment= (name) =>{
    return dispatch => {
        setTimeout(()=>{
            dispatch({
                    type:INCREMENT,
                    name
                })
        },3000);

    }
}

或者(这两个相同，只不过放在action的参数不同，需要日志action.payload获取数据)：
export const increment= (name) =>{
   return {
      type:INCREMENT,
      payload:new Promise((resolve,reject) =>{
	setTimeOut(() =>{
		resolve(name)
	},3000)

      })

   }

}

----------------
redux-DevTools开发工具
-----------

下载chrome他的插件
下载开发包 npm install redux-devtools-extension --save-dev

index.js中导入：
import {composeWithDebTools} from "redux-devtools-extension"

使用它把中间件包裹起来就好

const store = createStore(rootReducer,{},composeWithDebTools（applyMiddleware(logger,thunk,promise())）)	


----------------------------
在开发环境和上线环境需要去掉开发的logger和redux日志输入的配置改写
npm run build
server -v build
-----------------------------
需要把创建store单独提出来，用process.env.NODE_ENV判断
当开发环境时配置一个store
当上线环境时有配置一个store


--------------------
热门快加载HRM

---------------------
module.hot


----------------
moment 库 用来改变日期的样式

--------------------
Cookie --------第三方sfcookies
主要有三个方法保存/更新，读取，删除 bake_cookie,read_cookie,delete_cookie
